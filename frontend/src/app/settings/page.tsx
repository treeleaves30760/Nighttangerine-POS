'use client';

import * as React from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { 
  Plus,
  Package,
  Settings,
  LogOut,
  Home,
  ShoppingCart,
  Edit,
  Trash2,
  Save,
  X,
  DollarSign
} from 'lucide-react';
import Link from 'next/link';

// Mock authentication hook (same as sells page)
const useAuth = () => {
  const [isAuthenticated, setIsAuthenticated] = React.useState(false);
  const [user, setUser] = React.useState<{name: string; role: string} | null>(null);

  React.useEffect(() => {
    const authStatus = localStorage.getItem('pos-auth');
    if (authStatus === 'true') {
      setIsAuthenticated(true);
      setUser({ name: 'Admin User', role: 'Manager' });
    }
  }, []);

  const logout = () => {
    setIsAuthenticated(false);
    setUser(null);
    localStorage.removeItem('pos-auth');
  };

  return { isAuthenticated, user, logout };
};

interface Product {
  id: string;
  name: string;
  price: number;
  category: string;
  available: boolean;
}

const LoginPrompt = () => (
  <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4">
    <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-8 w-full max-w-md border border-gray-200 dark:border-gray-700 text-center">
      <Settings className="h-12 w-12 text-purple-600 dark:text-purple-400 mx-auto mb-4" />
      <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2">
        Authentication Required
      </h1>
      <p className="text-gray-600 dark:text-gray-400 mb-6">
        Please log in to access the settings panel
      </p>
      <div className="space-y-3">
        <Link href="/sells">
          <Button className="w-full">
            Sign In
          </Button>
        </Link>
        <Link href="/">
          <Button variant="outline" className="w-full">
            ‚Üê Back to menu
          </Button>
        </Link>
      </div>
    </div>
  </div>
);

export default function SettingsPage() {
  const { isAuthenticated, user, logout } = useAuth();
  const [products, setProducts] = React.useState<Product[]>([]);
  const [editingProduct, setEditingProduct] = React.useState<Product | null>(null);
  const [isAddingNew, setIsAddingNew] = React.useState(false);
  const [newProduct, setNewProduct] = React.useState<Omit<Product, 'id'>>({
    name: '',
    price: 0,
    category: '',
    available: true
  });

  // Load products from API (mock data for now)
  React.useEffect(() => {
    // In real app, this would fetch from your backend API
    // For now, we'll use localStorage to persist changes
    const savedProducts = localStorage.getItem('pos-products');
    if (savedProducts) {
      setProducts(JSON.parse(savedProducts));
    } else {
      // Initial products - these would come from your database
      const initialProducts: Product[] = [
        { id: '1', name: 'Cappuccino', price: 4.50, category: 'Beverages', available: true },
        { id: '2', name: 'Espresso', price: 2.50, category: 'Beverages', available: true },
        { id: '3', name: 'Green Tea', price: 3.00, category: 'Beverages', available: true },
        { id: '4', name: 'Caesar Salad', price: 12.99, category: 'Food', available: true },
        { id: '5', name: 'Club Sandwich', price: 9.50, category: 'Food', available: true },
        { id: '6', name: 'Croissant', price: 3.25, category: 'Bakery', available: true },
        { id: '7', name: 'Chocolate Muffin', price: 4.75, category: 'Bakery', available: true },
      ];
      setProducts(initialProducts);
      localStorage.setItem('pos-products', JSON.stringify(initialProducts));
    }
  }, []);

  const saveProducts = (updatedProducts: Product[]) => {
    setProducts(updatedProducts);
    localStorage.setItem('pos-products', JSON.stringify(updatedProducts));
  };

  const handleAddProduct = () => {
    if (!newProduct.name || !newProduct.category || newProduct.price <= 0) {
      alert('Please fill in all fields with valid values');
      return;
    }

    const product: Product = {
      ...newProduct,
      id: Date.now().toString(), // In real app, this would be generated by the backend
    };

    const updatedProducts = [...products, product];
    saveProducts(updatedProducts);
    setNewProduct({ name: '', price: 0, category: '', available: true });
    setIsAddingNew(false);
  };

  const handleEditProduct = (product: Product) => {
    setEditingProduct({ ...product });
  };

  const handleSaveEdit = () => {
    if (!editingProduct) return;
    
    const updatedProducts = products.map(p => 
      p.id === editingProduct.id ? editingProduct : p
    );
    saveProducts(updatedProducts);
    setEditingProduct(null);
  };

  const handleDeleteProduct = (id: string) => {
    if (confirm('Are you sure you want to delete this product?')) {
      const updatedProducts = products.filter(p => p.id !== id);
      saveProducts(updatedProducts);
    }
  };

  const toggleAvailability = (id: string) => {
    const updatedProducts = products.map(p => 
      p.id === id ? { ...p, available: !p.available } : p
    );
    saveProducts(updatedProducts);
  };

  if (!isAuthenticated) {
    return <LoginPrompt />;
  }

  return (
    <div className="flex h-screen bg-gray-50 dark:bg-gray-900">
      {/* Sidebar */}
      <div className="w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 flex flex-col">
        <div className="p-6 border-b border-gray-200 dark:border-gray-700">
          <h1 className="text-xl font-bold bg-gradient-to-r from-purple-600 to-purple-500 bg-clip-text text-transparent">
            POS Settings
          </h1>
          <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
            Welcome, {user?.name}
          </p>
        </div>
        
        <nav className="flex-1 p-4 space-y-2">
          <Link href="/sells">
            <Button variant="ghost" className="w-full justify-start">
              <ShoppingCart className="mr-3 h-4 w-4" />
              Point of Sale
            </Button>
          </Link>
          
          <Button variant="ghost" className="w-full justify-start bg-purple-50 text-purple-700 dark:bg-purple-900 dark:text-purple-300">
            <Settings className="mr-3 h-4 w-4" />
            Settings
          </Button>
          
          <Link href="/">
            <Button variant="ghost" className="w-full justify-start">
              <Home className="mr-3 h-4 w-4" />
              Customer View
            </Button>
          </Link>
        </nav>
        
        <div className="p-4 border-t border-gray-200 dark:border-gray-700">
          <Button variant="ghost" onClick={logout} className="w-full justify-start text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900">
            <LogOut className="mr-3 h-4 w-4" />
            Sign Out
          </Button>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 p-6 overflow-auto">
        <div className="mb-6">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h2 className="text-2xl font-semibold text-gray-900 dark:text-gray-100">Product Management</h2>
              <p className="text-gray-600 dark:text-gray-400">Manage your store's products and pricing</p>
            </div>
            <Button onClick={() => setIsAddingNew(true)} disabled={isAddingNew}>
              <Plus className="mr-2 h-4 w-4" />
              Add Product
            </Button>
          </div>
        </div>

        {/* Add New Product Form */}
        {isAddingNew && (
          <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6 mb-6">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">Add New Product</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Product Name
                </label>
                <Input
                  value={newProduct.name}
                  onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}
                  placeholder="Enter product name"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Category
                </label>
                <Input
                  value={newProduct.category}
                  onChange={(e) => setNewProduct({ ...newProduct, category: e.target.value })}
                  placeholder="e.g. Beverages, Food, Bakery"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Price ($)
                </label>
                <Input
                  type="number"
                  step="0.01"
                  min="0"
                  value={newProduct.price || ''}
                  onChange={(e) => setNewProduct({ ...newProduct, price: parseFloat(e.target.value) || 0 })}
                  placeholder="0.00"
                />
              </div>
              <div className="flex items-end space-x-2">
                <Button onClick={handleAddProduct} className="flex-1">
                  <Save className="mr-2 h-4 w-4" />
                  Save
                </Button>
                <Button variant="outline" onClick={() => setIsAddingNew(false)}>
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>
        )}

        {/* Products Table */}
        <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Product
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Category
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Price
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 dark:divide-gray-600">
                {products.map((product) => (
                  <tr key={product.id} className="hover:bg-gray-50 dark:hover:bg-gray-700">
                    <td className="px-6 py-4">
                      {editingProduct?.id === product.id ? (
                        <Input
                          value={editingProduct.name}
                          onChange={(e) => setEditingProduct({ ...editingProduct, name: e.target.value })}
                          className="max-w-xs"
                        />
                      ) : (
                        <div className="flex items-center">
                          <Package className="h-5 w-5 text-gray-400 mr-3" />
                          <span className="font-medium text-gray-900 dark:text-gray-100">{product.name}</span>
                        </div>
                      )}
                    </td>
                    <td className="px-6 py-4">
                      {editingProduct?.id === product.id ? (
                        <Input
                          value={editingProduct.category}
                          onChange={(e) => setEditingProduct({ ...editingProduct, category: e.target.value })}
                          className="max-w-xs"
                        />
                      ) : (
                        <span className="text-gray-600 dark:text-gray-400">{product.category}</span>
                      )}
                    </td>
                    <td className="px-6 py-4">
                      {editingProduct?.id === product.id ? (
                        <div className="flex items-center max-w-xs">
                          <DollarSign className="h-4 w-4 text-gray-400 mr-1" />
                          <Input
                            type="number"
                            step="0.01"
                            min="0"
                            value={editingProduct.price}
                            onChange={(e) => setEditingProduct({ ...editingProduct, price: parseFloat(e.target.value) || 0 })}
                          />
                        </div>
                      ) : (
                        <span className="font-mono font-semibold text-gray-900 dark:text-gray-100">
                          ${product.price.toFixed(2)}
                        </span>
                      )}
                    </td>
                    <td className="px-6 py-4">
                      <button
                        onClick={() => toggleAvailability(product.id)}
                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium transition-colors ${
                          product.available
                            ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 hover:bg-green-200 dark:hover:bg-green-800'
                            : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'
                        }`}
                      >
                        {product.available ? 'Available' : 'Out of Stock'}
                      </button>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex items-center space-x-2">
                        {editingProduct?.id === product.id ? (
                          <>
                            <Button size="sm" onClick={handleSaveEdit}>
                              <Save className="h-4 w-4" />
                            </Button>
                            <Button size="sm" variant="outline" onClick={() => setEditingProduct(null)}>
                              <X className="h-4 w-4" />
                            </Button>
                          </>
                        ) : (
                          <>
                            <Button size="sm" variant="outline" onClick={() => handleEditProduct(product)}>
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button 
                              size="sm" 
                              variant="outline" 
                              onClick={() => handleDeleteProduct(product.id)}
                              className="text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </>
                        )}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          
          {products.length === 0 && (
            <div className="text-center py-12">
              <Package className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">No products found</h3>
              <p className="text-gray-600 dark:text-gray-400">Get started by adding your first product</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}